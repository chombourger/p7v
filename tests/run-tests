#!/bin/bash

NSS_DB=tests.db
PASS=abcdefg
P7V=${P7V:-../p7v}
GOLDEN_DIR=golden

self_signed_cert=self
pass_file=passwd.txt
john_subj="/C=US/ST=IL/L=Chicago/O=Dummy/OU=Test/CN=John Doe/emailAddress=john.doe@p7v.com"

create_pass_file() {
   echo "${PASS}" > ${pass_file}
}

delete_pass_file() {
   rm -f ${pass_file}
}

create_self_signed_cert() {
   openssl req -x509 -newkey rsa:1024 -keyout ${self_signed_cert}.privkey -out ${self_signed_cert}.cert \
   -passout pass:abcdefg -subj "/C=US/ST=IL/L=Chicago/O=Dummy/OU=Test/CN=John Doe/emailAddress=john.doe@dummy.me"
}

delete_self_signed_cert() {
   rm -f ${self_signed_cert}.cert ${self_signed_cert}.privkey
}

create_root_ca() {
   mkdir -p root-ca/{conf,private,public,signed-keys}
   cat <<EOF > root-ca/conf/openssl.cnf
[ req ]
default_bits            = 2048
default_keyfile         = ./root-ca/private/root.pem
default_md              = 
prompt                  = no
distinguished_name      = root_ca_distinguished_name
x509_extensions = v3_ca

[ root_ca_distinguished_name ]
countryName             = US
stateOrProvinceName     = IL
localityName            = Chicago
0.organizationName      = P7V
commonName              = P7V Root CA
emailAddress            = david@p7v.com

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints = CA:true

[ ca ]
default_ca              = CA_default

[ CA_default ]
dir                     = .
new_certs_dir           = ./root-ca/signed-keys/
database                = ./root-ca/conf/index
certificate             = ./root-ca/public/root.pem
serial                  = ./root-ca/conf/serial
private_key             = ./root-ca/private/root.pem
x509_extensions         = usr_cert
name_opt                = ca_default
cert_opt                = ca_default
default_crl_days        = 30
default_days            = 365
default_md              = sha256
preserve                = no
policy                  = policy_match

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = supplied

[ usr_cert ]
basicConstraints=critical,CA:FALSE
keyUsage = critical,digitalSignature,keyAgreement
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid
extendedKeyUsage = codeSigning

[ v3_req ]
keyUsage = critical,digitalSignature,keyAgreement
extendedKeyUsage = codeSigning

EOF
   openssl req -nodes -config root-ca/conf/openssl.cnf -days 1825 \
      -x509 -newkey rsa:2048 -sha256 -out root-ca/public/root.pem -outform PEM \
   && touch root-ca/conf/index \
   && echo "01" > root-ca/conf/serial
}

delete_root_ca() {
   rm -rf root-ca
}

create_cert_from_ca() {
   openssl req -out "${1}.csr" -new -newkey rsa:2048 -nodes -sha256 -keyout "${1}.privkey" -subj "${2}" \
   && openssl ca -batch -config root-ca/conf/openssl.cnf -in "${1}.csr" -out "${1}.cert"
}

create_nss_db() {
   mkdir ${NSS_DB} && certutil -N -d ${NSS_DB} -f ${pass_file}
}

delete_nss_db() {
   rm -rf ${NSS_DB}
}

add_cert_to_db() {
   certutil -A -d ${NSS_DB} -n ${1} -i ${2} -t P,P,P
}

add_ca_to_db() {
   certutil -A -d ${NSS_DB} -n ${1} -i ${2} -t C,C,C
}

revoke_cert() {
   certutil -M -d ${NSS_DB} -n ${1} -t p,p,p
}

trust_cert() {
   certutil -M -d ${NSS_DB} -n ${1} -t P,P,P
}

create_random_data() {
   MB=${MB:-1}
   dd if=/dev/urandom of=${1} bs=1024 count=$((${MB} * 1024)) 2> /dev/null
}

run_tests() {
   local s
   local file
   local MB
   local result
   local key=${key:-${self_signed_cert}}

   for s in 1 2 4 8 16 32 64 128 256 512
   do
      echo "# TEST ${1} with ${s}MB data"
      if [ -n "${extra_options}" ]
      then
         echo "# NOTE calling p7v with extra options: ${extra_options}"
      fi

      expected_result=${expected_result:-0}
      file=${1}-test-${s}MB
      MB=${s} create_random_data ${file}.raw
      openssl smime -passin pass:abcdefg -binary -sign -signer ${key}.cert -inkey ${key}.privkey -in ${file}.raw -out ${file}.signed -outform DER -nodetach
  
      if [ ${1} = "write-failure" ]
      then
         size=2
         ulimit -S -f ${size}
      else
         ulimit -S -f unlimited
      fi
 
      if [ ${1} = "altered-package" ]
      then
         seek=$((${s} * 1024 / 2))
         dd if=/dev/urandom of=${file}.signed seek=${seek} conv=notrunc bs=1024 count=1 2> /dev/null
      fi

      ${P7V} -v -d ${NSS_DB} -o ${file}.p7v ${extra_options} ${file}.signed \
         > ${file}.stdout 2> ${file}.stderr
   
      result=${?}

      if [ ${1} = "write-failure" ]
      then
         ulimit -S -f unlimited
      fi

      if [ ${result} -ne ${expected_result} ]
      then
         echo "P7V exited with status ${result} but ${expected_result} expected!" >&2
         return 1
      fi
 
      # Is the decoded file present?
      if [ ${expected_result} -eq 0 ]
      then 

         if [ ! -f ${file}.p7v ]
         then
            echo "P7V returned success but output file not found!" >&2
            return 1
         fi

         # Compare the output file with the raw file
         cmp ${file}.raw ${file}.p7v
         result=${?}
         if [ ${result} -ne 0 ]
         then
            echo "decoded file does not match raw input file!" >&2
            return ${result}
         fi
      else
         if [ -f ${file}.p7v ]
         then
            echo "P7V returned error but output file found!" >&2
            return 1
         fi
      fi
   
      # Compare the tool standard output with golden sample
      if [ -f ${GOLDEN_DIR}/${file}.stdout ]
      then
         cmp ${file}.stdout ${GOLDEN_DIR}/${file}.stdout
         result=${?}
         if [ ${result} -ne 0 ]
         then
            echo "stdout output does not match!" 2>&1
            diff -u ${GOLDEN_DIR}/${file}.stdout ${file}.stdout
            [ -z "${UPDATE_GOLDEN}" ] && return ${result}
         fi
      fi
   
      # Compare the tool standard error with golden sample
      if [ -f ${GOLDEN_DIR}/${file}.stderr ]
      then
         cmp ${file}.stderr ${GOLDEN_DIR}/${file}.stderr
         result=${?}
         if [ ${result} -ne 0 ]
         then
            echo "stderr output does not match!" 2>&1
            diff -u ${GOLDEN_DIR}/${file}.stderr ${file}.stderr
            [ -z "${UPDATE_GOLDEN}" ] && return ${result}
         fi
      fi

      # Update golden?
      if [ "${UPDATE_GOLDEN}" != "" ]
      then
         mv ${file}.stdout ${file}.stderr ${GOLDEN_DIR}
      fi

      rm -f ${file}.raw ${file}.signed ${file}.p7v ${file}.stdout ${file}.stderr
   done
   return 0
}

unset P7V_TRACE_APPLICATION
 
create_pass_file \
&& delete_nss_db \
&& create_nss_db \
&& create_self_signed_cert \
&& delete_root_ca \
&& create_root_ca \
&& add_ca_to_db ca root-ca/public/root.pem \
&& create_cert_from_ca "john" "${john_subj}" \
&& add_cert_to_db self ${self_signed_cert}.cert \
&& expected_result=0 run_tests trusted-signer \
&& revoke_cert self \
&& expected_result=4 run_tests revoked-signer \
&& trust_cert self \
&& expected_result=4 run_tests altered-package \
&& revoke_cert self \
&& expected_result=0 extra_options="-n" run_tests no-verify \
&& expected_result=0 key="john" run_tests trusted-ca-signer \
&& add_cert_to_db john john.cert \
&& revoke_cert john \
&& expected_result=4 key="john" run_tests revoked-ca-signer \
&& delete_nss_db \
&& rm -f *.csr *.privkey *.cert \
&& delete_root_ca \
&& delete_self_signed_cert \
&& delete_pass_file

